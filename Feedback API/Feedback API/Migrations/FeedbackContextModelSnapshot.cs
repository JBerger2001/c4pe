// <auto-generated />
using System;
using Feedback_API.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Feedback_API.Migrations
{
    [DbContext(typeof(FeedbackContext))]
    partial class FeedbackContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Feedback_API.Models.Domain.OpeningTime", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<TimeSpan>("Close")
                        .HasColumnType("time(6)");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Open")
                        .HasColumnType("time(6)");

                    b.Property<long>("PlaceID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("PlaceID");

                    b.ToTable("openingtimes");

                    b.HasData(
                        new
                        {
                            ID = 1L,
                            Close = new TimeSpan(0, 20, 0, 0, 0),
                            Day = 0,
                            Open = new TimeSpan(0, 8, 0, 0, 0),
                            PlaceID = 2L
                        },
                        new
                        {
                            ID = 2L,
                            Close = new TimeSpan(0, 19, 0, 0, 0),
                            Day = 0,
                            Open = new TimeSpan(0, 9, 0, 0, 0),
                            PlaceID = 3L
                        },
                        new
                        {
                            ID = 3L,
                            Close = new TimeSpan(0, 22, 0, 0, 0),
                            Day = 0,
                            Open = new TimeSpan(0, 10, 0, 0, 0),
                            PlaceID = 1L
                        });
                });

            modelBuilder.Entity("Feedback_API.Models.Domain.Place", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("City")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Country")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("PlaceTypeID")
                        .HasColumnType("bigint");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ZipCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ID");

                    b.HasIndex("PlaceTypeID");

                    b.ToTable("places");

                    b.HasData(
                        new
                        {
                            ID = 1L,
                            City = "Krems an der Donau",
                            Country = "AT",
                            IsVerified = true,
                            Name = "Coffeehut",
                            PlaceTypeID = 1L,
                            Street = "City Street 1",
                            ZipCode = "3500"
                        },
                        new
                        {
                            ID = 2L,
                            City = "Krems an der Donau",
                            Country = "AT",
                            IsVerified = true,
                            Name = "Footly",
                            PlaceTypeID = 2L,
                            Street = "City Street 2",
                            ZipCode = "3500"
                        },
                        new
                        {
                            ID = 3L,
                            City = "Krems an der Donau",
                            Country = "AT",
                            IsVerified = true,
                            Name = "Gusto Generic",
                            PlaceTypeID = 3L,
                            Street = "City Street 3",
                            ZipCode = "3500"
                        });
                });

            modelBuilder.Entity("Feedback_API.Models.Domain.PlaceType", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ID");

                    b.ToTable("placetypes");

                    b.HasData(
                        new
                        {
                            ID = 1L,
                            Name = "Café"
                        },
                        new
                        {
                            ID = 2L,
                            Name = "Shoe Store"
                        },
                        new
                        {
                            ID = 3L,
                            Name = "Fast Food Restaurant"
                        });
                });

            modelBuilder.Entity("Feedback_API.Models.Domain.Reaction", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<bool>("IsHelpful")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("ReviewID")
                        .HasColumnType("bigint");

                    b.Property<long>("UserID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("ReviewID");

                    b.HasIndex("UserID");

                    b.ToTable("reactions");

                    b.HasData(
                        new
                        {
                            ID = 1L,
                            IsHelpful = false,
                            ReviewID = 2L,
                            UserID = 3L
                        },
                        new
                        {
                            ID = 2L,
                            IsHelpful = true,
                            ReviewID = 1L,
                            UserID = 2L
                        });
                });

            modelBuilder.Entity("Feedback_API.Models.Domain.Review", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("PlaceID")
                        .HasColumnType("bigint");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("UserID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("PlaceID");

                    b.HasIndex("UserID");

                    b.ToTable("reviews");

                    b.HasData(
                        new
                        {
                            ID = 1L,
                            PlaceID = 2L,
                            Rating = 2,
                            Text = "meh",
                            Time = new DateTime(2020, 4, 22, 12, 15, 8, 700, DateTimeKind.Local).AddTicks(3740),
                            UserID = 2L
                        },
                        new
                        {
                            ID = 2L,
                            PlaceID = 1L,
                            Rating = 5,
                            Text = "nice",
                            Time = new DateTime(2020, 4, 22, 12, 15, 8, 703, DateTimeKind.Local).AddTicks(555),
                            UserID = 1L
                        },
                        new
                        {
                            ID = 3L,
                            PlaceID = 1L,
                            Rating = 4,
                            Text = "pretty good",
                            Time = new DateTime(2020, 4, 22, 12, 15, 8, 703, DateTimeKind.Local).AddTicks(611),
                            UserID = 2L
                        });
                });

            modelBuilder.Entity("Feedback_API.Models.Domain.User", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("AvatarURI")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("City")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Country")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("longblob");

                    b.Property<string>("Street")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ZipCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ID");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            ID = 1L,
                            City = "Krems an der Donau",
                            Country = "AT",
                            FirstName = "Peter",
                            IsVerified = false,
                            LastName = "Gustav",
                            PasswordHash = new byte[] { 0 },
                            PasswordSalt = new byte[] { 0 },
                            Street = "Example Street 1",
                            Username = "pete",
                            ZipCode = "3500"
                        },
                        new
                        {
                            ID = 2L,
                            City = "Krems an der Donau",
                            Country = "AT",
                            FirstName = "John",
                            IsVerified = false,
                            LastName = "Gustav",
                            PasswordHash = new byte[] { 0 },
                            PasswordSalt = new byte[] { 0 },
                            Street = "Example Street 2",
                            Username = "MrJohn",
                            ZipCode = "3500"
                        },
                        new
                        {
                            ID = 3L,
                            City = "Krems an der Donau",
                            Country = "AT",
                            FirstName = "Heinz",
                            IsVerified = false,
                            LastName = "Gustav",
                            PasswordHash = new byte[] { 0 },
                            PasswordSalt = new byte[] { 0 },
                            Street = "Example Street 3",
                            Username = "Ketchup",
                            ZipCode = "3500"
                        },
                        new
                        {
                            ID = 4L,
                            City = "Krems an der Donau",
                            Country = "AT",
                            FirstName = "Olaf",
                            IsVerified = false,
                            LastName = "Gustav",
                            PasswordHash = new byte[] { 0 },
                            PasswordSalt = new byte[] { 0 },
                            Street = "Example Street 4",
                            Username = "Olaf",
                            ZipCode = "3500"
                        },
                        new
                        {
                            ID = 5L,
                            City = "Krems an der Donau",
                            Country = "AT",
                            FirstName = "Hans",
                            IsVerified = false,
                            LastName = "Gustav",
                            PasswordHash = new byte[] { 0 },
                            PasswordSalt = new byte[] { 0 },
                            Street = "Example Street 5",
                            Username = "hansi12",
                            ZipCode = "3500"
                        });
                });

            modelBuilder.Entity("Feedback_API.Models.Domain.OpeningTime", b =>
                {
                    b.HasOne("Feedback_API.Models.Domain.Place", "Place")
                        .WithMany("OpeningTimes")
                        .HasForeignKey("PlaceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Feedback_API.Models.Domain.Place", b =>
                {
                    b.HasOne("Feedback_API.Models.Domain.PlaceType", "PlaceType")
                        .WithMany("Places")
                        .HasForeignKey("PlaceTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Feedback_API.Models.Domain.Reaction", b =>
                {
                    b.HasOne("Feedback_API.Models.Domain.Review", "Review")
                        .WithMany()
                        .HasForeignKey("ReviewID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Feedback_API.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Feedback_API.Models.Domain.Review", b =>
                {
                    b.HasOne("Feedback_API.Models.Domain.Place", "Place")
                        .WithMany("Reviews")
                        .HasForeignKey("PlaceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Feedback_API.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
